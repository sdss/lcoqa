#!/usr/bin/env python

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

# Process guide camera images into a single roll-up file with statistics.

import argparse
from itertools import chain
import subprocess


def parse_range(rng):
    parts = rng.split('-')
    if 1 > len(parts) > 2:
        raise ValueError("Bad range: '%s'" % (rng,))
    parts = [int(i) for i in parts]
    start = parts[0]
    end = start if len(parts) == 1 else parts[1]
    if start > end:
        end, start = start, end
    return range(start, end + 1)


def parse_range_list(rngs):
    return sorted(set(chain(*[parse_range(rng) for rng in rngs.split(',')])))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="All QA for a range of MJD",
                                     usage="all_qa --mjd [list] --telescope [lco, apo]")
    parser.add_argument("-m", "--mjd", type=str,
                        required=True, help="MJD list to process")
    parser.add_argument("-t", "--telescope", type=str,
                        required=True,
                        help="telescope guider images to process",
                        choices=['lco', 'apo'])
    args = parser.parse_args()

    mjds = parse_range_list(args.mjd)

    for mjd in mjds:
        print(mjd)
        try:
            subprocess.check_call(['gcam_qa', '-m', str(mjd),
                                   '-t', args.telescope])
            subprocess.check_call(['exposures_qa', '-m', str(mjd),
                                   '-t', args.telescope])
            subprocess.check_call(['signal_qa', '-m', str(mjd),
                                   '-t', args.telescope])
            subprocess.check_call(['exposures_qa_plots', '-m', str(mjd),
                                   '-t', args.telescope])
            subprocess.check_call(['signal_qa_plots', '-m', str(mjd),
                                   '-t', args.telescope])
            subprocess.check_call(['lcoqa_html', '-m', str(mjd),
                                   '-t', args.telescope])
        except subprocess.CalledProcessError:
            print("Could not complete MJD={mjd}".format(mjd=mjd))
